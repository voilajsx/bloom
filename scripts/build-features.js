/**
 * Bloom Framework - Feature discovery and build script
 * @file scripts/build-features.js
 */

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const FEATURES_DIR = path.join(__dirname, '../src/features');
const FEATURES_INDEX = path.join(FEATURES_DIR, 'index.ts');

async function discoverFeatures() {
  console.log('🌸 Bloom: Discovering features...');

  try {
    // Read features directory
    const entries = fs.readdirSync(FEATURES_DIR, { withFileTypes: true });

    // Find feature folders (not starting with _ and containing index.ts)
    const features = [];

    for (const entry of entries) {
      if (
        entry.isDirectory() &&
        !entry.name.startsWith('_') &&
        entry.name !== 'node_modules'
      ) {
        const featurePath = path.join(FEATURES_DIR, entry.name);
        const indexPath = path.join(featurePath, 'index.ts');

        if (fs.existsSync(indexPath)) {
          features.push(entry.name);
          console.log(`  ✅ Found feature: ${entry.name}`);
        } else {
          console.log(`  ⚠️ Skipping ${entry.name}: no index.ts found`);
        }
      }
    }

    // Generate features index
    const indexContent = generateFeaturesIndex(features);
    fs.writeFileSync(FEATURES_INDEX, indexContent, 'utf8');

    console.log(
      `🌸 Bloom: Generated features index with ${features.length} features`
    );
    return features;
  } catch (error) {
    console.error('❌ Feature discovery failed:', error);
    process.exit(1);
  }
}

function generateFeaturesIndex(features) {
  const imports = features
    .map(
      (feature) =>
        `export { default as ${toCamelCase(
          feature
        )} } from './${feature}/index';`
    )
    .join('\n');

  const featuresList = features
    .map((feature) => `'${toCamelCase(feature)}'`)
    .join(',\n  ');

  return `/**
 * Bloom Framework - Auto-generated feature exports
 * 🤖 This file is automatically generated during build
 * @module @voilajsx/bloom/features
 * @file src/features/index.ts
 */

// Auto-discovered features
${imports}

// Feature registry for runtime discovery
export const BLOOM_FEATURES = [
  ${featuresList}
];

// Build-time feature metadata
export const BLOOM_FEATURE_META = {
  version: '1.0.0',
  buildTime: '${new Date().toISOString()}',
  featuresCount: ${features.length}
};
`;
}

function toCamelCase(str) {
  return str.replace(/-([a-z])/g, (g) => g[1].toUpperCase());
}

// Run if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  discoverFeatures();
}

export { discoverFeatures };
