import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import tailwindcss from '@tailwindcss/vite'
import path from 'path'
import fs from 'fs'
import defaults, { getBasePath, getNavigationWithBasePath, getServerUrl } from './src/defaults'

// Enhanced Bloom feature discovery plugin
function bloomDiscoveryPlugin() {
  return {
    name: 'bloom-discovery',
    buildStart() {
      console.log('🌸 Bloom: Discovering features...')
      
      try {
        const featuresDir = path.resolve(process.cwd(), 'src/features')
        const entries = fs.readdirSync(featuresDir, { withFileTypes: true })
        
        const features = entries
          .filter(entry => 
            entry.isDirectory() && 
            !entry.name.startsWith('_') && 
            fs.existsSync(path.join(featuresDir, entry.name, 'index.ts'))
          )
          .map(entry => entry.name)
        
        // Generate features index
        const indexContent = generateFeaturesIndex(features)
        const indexPath = path.join(featuresDir, 'index.ts')
        fs.writeFileSync(indexPath, indexContent, 'utf8')
        
        console.log(`🌸 Bloom: Generated index for ${features.length} features: ${features.join(', ')}`)
        
      } catch (error) {
        console.error('❌ Bloom: Feature discovery failed:', error)
      }
    }
  }
}

// Generate features index content
function generateFeaturesIndex(features: string[]) {
  const imports = features.map(feature => 
    `export { default as ${toCamelCase(feature)} } from './${feature}/index';`
  ).join('\n')
  
  const featuresList = features.map(feature => `'${toCamelCase(feature)}'`).join(',\n  ')
  
  return `/**
 * Bloom Framework - Auto-generated feature exports
 * 🤖 This file is automatically generated during build
 * @module @voilajsx/bloom/features
 * @file src/features/index.ts
 */

// Auto-discovered features
${imports}

// Feature registry for runtime discovery
export const BLOOM_FEATURES = [
  ${featuresList}
];

// Build-time feature metadata
export const BLOOM_FEATURE_META = {
  version: '1.0.0',
  buildTime: '${new Date().toISOString()}',
  featuresCount: ${features.length}
};
`
}

function toCamelCase(str: string) {
  return str.replace(/-([a-z])/g, (g) => g[1].toUpperCase())
}

// https://vitejs.dev/config/
export default defineConfig(({ command, mode }) => {
  const isDev = command === 'serve'
  const isProd = mode === 'production'
  
  // Get unified configuration from defaults
  const basePath = getBasePath()
  const navigationItems = getNavigationWithBasePath()
  const serverUrl = getServerUrl()
  
  console.log(`🌸 Bloom: Using base path: ${basePath}`)
  console.log(`🌸 Bloom: Server will be available at: ${serverUrl}`)
  
  return {
    // Base path configuration (same for dev and production)
    base: basePath,
    
    plugins: [
      react(),
      tailwindcss(),
      bloomDiscoveryPlugin(),
    ],
    resolve: {
      alias: {
        '@': path.resolve(__dirname, './src'),
        '@/features': path.resolve(__dirname, './src/features'),
        '@/shared': path.resolve(__dirname, './src/shared'),
        '@/platform': path.resolve(__dirname, './src/platform'),
      }
    },
    build: {
      outDir: defaults['build-out-dir'],
      assetsDir: defaults['build-assets-dir'],
      rollupOptions: {
        output: {
          manualChunks: {
            'vendor': ['react', 'react-dom'],
            'router': ['react-router-dom'],
            'uikit': ['@voilajsx/uikit']
          }
        }
      },
      sourcemap: isDev
    },
    define: {
      __BLOOM_VERSION__: JSON.stringify(process.env.npm_package_version || '1.0.0'),
      __BLOOM_DEV__: JSON.stringify(isDev),
      __BLOOM_BASE_PATH__: JSON.stringify(basePath),
      
      // UIKit Layout Environment Variables
      'import.meta.env.VITE__LAYOUT__THEME': JSON.stringify(defaults['app-theme']),
      'import.meta.env.VITE__LAYOUT__TYPE': JSON.stringify('page'),
      'import.meta.env.VITE__LAYOUT__TITLE': JSON.stringify(defaults['app-name']),
      'import.meta.env.VITE__LAYOUT__NAVIGATION': JSON.stringify(JSON.stringify(navigationItems)),
      'import.meta.env.VITE__LAYOUT__BASE_PATH': JSON.stringify(basePath),
      
      'import.meta.env.VITE__LAYOUT__PAGE__SIZE': JSON.stringify(defaults['layout-size']),
    },
    ssr: {
      noExternal: ['@voilajsx/uikit']
    },
    server: {
      port: defaults['port'],
      host: defaults['host'],
      open: basePath, // Open browser to the correct base path
    },
    preview: {
      port: defaults['port'],
      host: defaults['host'],
      open: basePath, // Same settings for preview
    }
  }
})